linux kvm：
yum install virt-manager libvirt virt-viewer  //kvm虚拟机管理器
sudo yum install rpmdevtools

yum install tigervnc-server  //linux vnc工具
yum install vnc

//建立一个虚拟机
 virsh  attach-interface --type bridge  --model virtio  --source br0 --persistent --domain win2k8
 -----------------------------------------------------------------------------------------

windows thread相关
CreateSemaphore
------------------------------------------------------------------------------------------

windows key：
升级旗舰版key  6K2KY-BFH24-PJW6W-9GK29-TMPWP
------------------------------------------------------------------------------------------

curlftps:
curlftpfs  ftp://user:password@ftp.uit.com.cn /mnt/uitftp/
------------------------------------------------------------------------------------------

tar命令:
＃gzip -dc /mnt/lgx/a1.doc.tar.gz （产生a1.doc.tar文件）
＃tar -xvf /mnt/lgx/a1.doc.tar （产生a1.doc文件）
这两次命令也可使用管道功能，把两个命令合二为一：
＃gzip -dc /mnt/lgx/a1.doc.tar.gz | tar -xvf

不解压直接查看tar包内容 
    1. file.tar.gz
    gzip -dc file.tar.gz | tar tvf -

    2. file.tar.bz2
    bzip2 -dc file.tar.bz2 |tar tvf -

    3. file.tar
    tar tvf file.tar

[root@linux ~]# cd /tmp
[root@linux tmp]# tar -cvf – /etc | tar -xvf –
# 类似 cp -r /etc /tmp 
# 要注意的地方在于输出档变成 – 而输入档也变成 – ，又有一个 | 存在

[root@linux ~]# tar [-cxtzjvfpPN] 文件与目录 ....
参数：
-c ：建立一个压缩文件的参数指令(create 的意思)；
-x ：解开一个压缩文件的参数指令！
-t ：查看 tarfile 里面的文件！
特别注意，在参数的下达中， c/x/t 仅能存在一个！不可同时存在！
因为不可能同时压缩与解压缩。
-z ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？
-j ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？
-v ：压缩的过程中显示文件！这个常用，但不建议用在背景执行过程！
-f ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加参数！
　　　例如使用『 tar -zcvfP tfile sfile』就是错误的写法，要写成
　　　『 tar -zcvPf tfile sfile』才对喔！
-p ：使用原文件的原来属性（属性不会依据使用者而变）
-P ：可以使用绝对路径来压缩！
-N ：比后面接的日期(yyyy/mm/dd)还要新的才会被打包进新建的文件中！
--exclude FILE：在压缩的过程中，不要将 FILE 打包！


范例：
范例一：将整个 /etc 目录下的文件全部打包成为 /tmp/etc.tar
[root@linux ~]# tar -cvf /tmp/etc.tar /etc <==仅打包，不压缩！
[root@linux ~]# tar -zcvf /tmp/etc.tar.gz /etc <==打包后，以 gzip 压缩
[root@linux ~]# tar -jcvf /tmp/etc.tar.bz2 /etc <==打包后，以 bzip2 压缩
# 特别注意，在参数 f 之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。
# 如果加 z 参数，则以 .tar.gz 或 .tgz 来代表 gzip 压缩过的 tar file ～
# 如果加 j 参数，则以 .tar.bz2 来作为附档名啊～
# 上述指令在执行的时候，会显示一个警告讯息：
# 『tar: Removing leading `/' from member names』那是关於绝对路径的特殊设定。

范例二：查阅上述 /tmp/etc.tar.gz 文件内有哪些文件？
[root@linux ~]# tar -ztvf /tmp/etc.tar.gz
# 由於我们使用 gzip 压缩，所以要查阅该 tar file 内的文件时，
# 就得要加上 z 这个参数了！这很重要的！

范例三：将 /tmp/etc.tar.gz 文件解压缩在 /usr/local/src 底下
[root@linux ~]# cd /usr/local/src
[root@linux src]# tar -zxvf /tmp/etc.tar.gz
# 在预设的情况下，我们可以将压缩档在任何地方解开的！以这个范例来说，
# 我先将工作目录变换到 /usr/local/src 底下，并且解开 /tmp/etc.tar.gz ，
# 则解开的目录会在 /usr/local/src/etc 呢！另外，如果您进入 /usr/local/src/etc
# 则会发现，该目录下的文件属性与 /etc/ 可能会有所不同喔！

范例四：在 /tmp 底下，我只想要将 /tmp/etc.tar.gz 内的 etc/passwd 解开而已
[root@linux ~]# cd /tmp
[root@linux tmp]# tar -zxvf /tmp/etc.tar.gz etc/passwd
# 我可以透过 tar -ztvf 来查阅 tarfile 内的文件名称，如果单只要一个文件，
# 就可以透过这个方式来下达！注意到！ etc.tar.gz 内的根目录 / 是被拿掉了！

范例五：将 /etc/ 内的所有文件备份下来，并且保存其权限！
[root@linux ~]# tar -zxvpf /tmp/etc.tar.gz /etc
# 这个 -p 的属性是很重要的，尤其是当您要保留原本文件的属性时！

范例六：在 /home 当中，比 2005/06/01 新的文件才备份
[root@linux ~]# tar -N '2005/06/01' -zcvf home.tar.gz /home

范例七：我要备份 /home, /etc ，但不要 /home/dmtsai
[root@linux ~]# tar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc

范例八：将 /etc/ 打包后直接解开在 /tmp 底下，而不产生文件！
[root@linux ~]# cd /tmp
[root@linux tmp]# tar -cvf - /etc | tar -xvf -
# 这个动作有点像是 cp -r /etc /tmp 啦～依旧是有其有用途的！
----------------------------------------------------------------------------------------------

centos安装时硬盘raid
问题一：系统硬盘centos无法识别
解决办法：需要手动安装阵列卡驱动
使用dd if=/root/dudong of=/dev/sda
将驱动写入U盘
/root/dudong为驱动存放位置
/dev/sda 为U盘

安装时在系统进入安装界面是按Tab键
空格在后面输入linux dd
如果进入系统后提示找不到空余空间应该是以前的阵列卡信息没有删除
解决办法
安装时在系统进入安装界面是按Tab键
空格在后面输入nodmraid linux dd
-------------------------------------------------------------------------------------------

iometer：
windows_client.exe -master_server="172.16.60.25" -master_missed_pings=2 -cs_missed_pings=3 -read_timeout=200 -t=8 -prefetch_chunks=8 -chunk_size=1048576 -readahead_chunks=2 -buffered_chunks=32 -min_net_clients=1 -num_event_threads=8 -timeout_secs=2 -back_jump_distance=8 -synccallback_timeout_ms=400 -fs=win -write_budget_mbs=256 -idle_dir_ms=600000 -user=root -password=root -l=t -lpath=/ 
pause
-------------------------------------------------------------------------------------------

gdb调试：
gdb --ex "handle SIGPIPE nostop noprint" --ex run --args 
-------------------------------------------------------------------------------------------

pprof分析：
env HEAPCHECK=normal PPROF_PATH=/usr/local/sbin/pprof /usr/local/sbin/ufsclient -log_file_num=10 -log_cleaner_timeval=180 -max_log_size=10 -log_dir=/tmp -minloglevel=1 -master_server=172.16.65.250 -master_server_port=8888 -mount_point=/mnt/test -user=root -password=root -prefetch_chunks=8 -chunk_size=262144 -readahead_chunks=2 -buffered_chunks=32 -buffered_write_chunks=20 -master_missed_pings=10 -cs_missed_pings=10 -read_timeout=100 -min_net_clients=1 -num_event_threads=8 -timeout_secs=10 -back_jump_distance=8 -synccallback_timeout_ms=400 -write_budget_mbs=256 -fuse_options=nonempty

HeapProfilerStart（"/tmp/ufsclient"）
 <gperftools/heap-profiler.h> <google/profiler.h>

env HEAPCHECK=normal PPROF_PATH=/usr/local/sbin/pprof /usr/local/sbin/ufsclient -log_file_num=10 -log_cleaner_timeval=180 -max_log_size=10 -log_dir=/tmp -minloglevel=1 -master_server=172.16.65.250 -master_server_port=8888 -mount_point=/mnt/test -user=root -password=root -prefetch_chunks=8 -chunk_size=262144 -readahead_chunks=2 -buffered_chunks=32 -buffered_write_chunks=20 -master_missed_pings=10 -cs_missed_pings=10 -read_timeout=100 -min_net_clients=1 -num_event_threads=8 -timeout_secs=10 -back_jump_distance=8 -synccallback_timeout_ms=400 -write_budget_mbs=256 -fuse_options=nonempty

pprof /usr/local/sbin/ufsclient "/tmp/ufsclient.7162._main_-end.heap" --inuse_objects --lines --heapcheck  --edgefraction=1e-10 --nodefraction=1e-10 -text

pprof --text --base=/tmp/ufsclient.0001.heap /usr/local/sbin/ufsclient  /tmp/ufsclient.0040.heap
----------------------------------------------------------------------------------------------

pick-writter：
./pick-writter -d /mnt/ufs/ -t 100 -r 1024KB -s 100MB -c 0
----------------------------------------------------------------------------------------------

coredump调试
ulimit -S -c unlimited
echo "/tmp/core-%e-%p-%t" > /proc/sys/kernel/core_pattern
cat /var/log/ufs/ufscorelog.txt

gdb -c /tmp/core-ufs_meta-823-1451267661 /usr/local/sbin/ufs_meta
------------------------------------------------------------------------------------------------

命令重定向
cmd >/dev/null 2>&1 || :
------------------------------------------------------------------------------------------------

nfs，samba挂载：
mount -t cifs -o username=root,password=root //smb.ufs.com/207 /mnt/smb
mount –t nfs 172.16.98.10:/test /mnt/test –ov3

centos7 nfs:
sudo systemctl enable rpcbind
sudo systemctl enable nfs-server
sudo systemctl start rpcbind start
sudo systemctl start nfs-server.service

注意：配置好smb后windows挂载会出现权限问题需要关闭senlinux：setenfore 0
-----------------------------------------------------------------------------------------------

windows工具：
SetupFactory    制作安装程序
------------------------------------------------------------------------------------------------

linux命令：
dracut
mkinitrd（很少使用）
-----------------------------------------------------------------------------------------

其他：
Reverse Tunneling    反隧道技术

------------------------------------------------------------------------------------------------
Google:
BigTable：GFS + Chubby    ---> windows Azure Storage和hadoop
Spanner：跨多个数据中心的数据库事务   Colossus第二代GFS
Megastore：基于Bigtable
MapReduce
Percolator
TCmalloc
Tenzing
Pregel
F1
Dremel

Microsoft:
Dryad

Yahoo:
S4

Twitter:
Storm

EMC:
Greenplum    PostgreSQL

HP:
Vertica

Facebook:
Haystack
rocksdb

Amazon:
Dynamo  --> 开源实现：Cassandra  (无中心节点的设计)

TFS:
Tair:分布式建值系统(有中心节点，主备)
OceanBase：阿里数据库

ssdb

------------------------------------------------------------------------------------------------
集群选举算法
Paxos 2PC
raft

hanewin_nfs_server_V1.1.69  windows  nfs

------------------------------------------------------------------------------------------------
linux出现readonly：
mount -o remount rw /


------------------------------------------------------------------------------------------------
流控：
1.关于流控:可以使用ethtool -a   网口名查看是否开启：
[root@node_188 ~]# ethtool -a eth2
Pause parameters for eth2:
Autonegotiate:       on
RX:                  on      
TX:                  on
ethtool -s eth2 duplex full autoneg on  开启流控。
ethtool -A eth2 rx on
ethtool -A eth2 tx on
2.关于RX、TX设置：
编辑/etc/rc.sysinit文件，在最后加入如下命令：
for d in `ls /sys/class/net/`                                  
do                                                                         
 ethtool -G $d rx 2048 tx 2048 >/dev/null 2>&1 || :    这两个数值可以根据实际情况修改：
done                                                   如改为和交换机一致


